---
openapi: 3.0.1
info:
  title: API V1
  version: v1
components:
  schemas:
    stores:
      type: array
      items:
        type: object
        properties:
          uuid:
            type: string
            example: Identifier of the store
            description: Unique identifier of the store
          name:
            type: string
            example: Name of the store
          phone:
            type: string
            example: Phone of the store
          email:
            type: string
            example: Email of the store
          street:
            type: string
            example: Street of the store
          number:
            type: string
            example: Number of the store
          letter:
            type: string
            example: Letter of the store
          postal_code:
            type: string
            example: Postal code of the store
          country:
            type: string
            example: Country of the store
          city:
            type: string
            example: City of the store
          created_at:
            type: string
            example: Created at of the store
          updated_at:
            type: string
            example: Updated at of the store
    create_store:
      type: object
      properties:
        name:
          type: string
          example: Name of the store
        phone:
          type: string
          example: Phone of the store
        email:
          type: string
          example: Email of the store
        street:
          type: string
          example: Street of the store
        number:
          type: string
          example: Number of the store
        letter:
          type: string
          example: Letter of the store
        postal_code:
          type: string
          example: Postal code of the store
        country:
          type: string
          example: Country of the store
        city:
          type: string
          example: City of the store
    store:
      type: object
      properties:
        uuid:
          type: string
          example: Identifier of the store
        name:
          type: string
          example: Name of the store
        phone:
          type: string
          example: Phone of the store
        email:
          type: string
          example: Email of the store
        street:
          type: string
          example: Street of the store
        number:
          type: string
          example: Number of the store
        letter:
          type: string
          example: Letter of the store
        postal_code:
          type: string
          example: Postal code of the store
        country:
          type: string
          example: Country of the store
        city:
          type: string
          example: City of the store
        created_at:
          type: string
          example: Created at of the store
        updated_at:
          type: string
          example: Updated at of the store
    generic_error:
      type: object
      properties:
        error_code:
          type: string
          example: Error code
        description:
          type: string
          example: Error description
    products:
      type: array
      items:
        type: object
        properties:
          uuid:
            type: string
            example: Identifier of the product
            description: Unique identifier of the product
          name:
            type: string
            example: Name of the product
          sku:
            type: string
            example: SKU of the product
          kind:
            type: string
            example: Kind of the product
          price:
            type: string
            example: Price of the product
          description:
            type: string
            example: Description of the product
          created_at:
            type: datetime
            example: Created at of the product
          updated_at:
            type: datetime
            example: Updated at of the product
    create_product:
      type: object
      properties:
        name:
          type: string
          example: Name of the product
        sku:
          type: string
          example: SKU of the product
        kind:
          type: string
          example: Kind of the product
        price:
          type: string
          example: Price of the product
        description:
          type: string
          example: Description of the product
    product:
      type: object
      properties:
        uuid:
          type: string
          example: Identifier of the product
        name:
          type: string
          example: Name of the product
        sku:
          type: string
          example: SKU of the product
        kind:
          type: string
          example: Kind of the product
        price:
          type: string
          example: Price of the product
        description:
          type: string
          example: Description of the product
        created_at:
          type: datetime
          example: Created at of the product
        updated_at:
          type: datetime
          example: Updated at of the product
    assign_products:
      type: object
      properties:
        product_uuids:
          type: string
          example: Product_uuid1,Product_uuid2,Product_uuid3
          description: Product uuids to assign separated by commas
paths:
  "/api/v1/products":
    get:
      summary: show products
      tags:
      - Products
      description: See products
      operationId: showProducts
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/products"
    post:
      summary: create product
      tags:
      - Products
      description: Create a product
      operationId: createProduct
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/product"
        '422':
          description: invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/generic_error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/create_product"
        required: true
  "/api/v1/products/{uuid}":
    parameters:
    - name: uuid
      in: path
      required: true
      schema:
        type: string
    get:
      summary: show product
      tags:
      - Products
      description: See a product
      operationId: showProduct
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/product"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/generic_error"
    put:
      summary: update product
      tags:
      - Products
      description: Update a product
      operationId: updateProduct
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/product"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/generic_error"
        '422':
          description: invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/generic_error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/create_product"
        required: true
    delete:
      summary: delete product
      tags:
      - Products
      description: Delete a product
      operationId: deleteProduct
      responses:
        '204':
          description: successful
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/generic_error"
  "/api/v1/stores":
    get:
      summary: show stores
      tags:
      - Stores
      description: See stores
      operationId: showStores
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/stores"
    post:
      summary: create store
      tags:
      - Stores
      description: Create a store
      operationId: createStore
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/store"
        '422':
          description: invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/generic_error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/create_store"
        required: true
  "/api/v1/stores/{uuid}":
    parameters:
    - name: uuid
      in: path
      required: true
      schema:
        type: string
    get:
      summary: show store
      tags:
      - Stores
      description: See a store
      operationId: showStore
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/store"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/generic_error"
    put:
      summary: update store
      tags:
      - Stores
      description: Update a store
      operationId: updateStore
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/store"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/generic_error"
        '422':
          description: invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/generic_error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/create_store"
        required: true
    delete:
      summary: delete store
      tags:
      - Stores
      description: Delete a store
      operationId: deleteStore
      responses:
        '204':
          description: successful
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/generic_error"
  "/api/v1/stores/{uuid}/assign_products":
    parameters:
    - name: uuid
      in: path
      required: true
      schema:
        type: string
    post:
      summary: assign products to store
      tags:
      - Stores
      description: Assign products to a store
      operationId: assignProductsToStore
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/store"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/generic_error"
        '422':
          description: invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/generic_error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/assign_products"
        required: true
  "/api/v1/stores/{uuid}/unassign_products":
    parameters:
    - name: uuid
      in: path
      required: true
      schema:
        type: string
    delete:
      summary: unassign products from store
      tags:
      - Stores
      description: Unassign products from a store
      operationId: unassignProductsFromStore
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/store"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/generic_error"
        '422':
          description: invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/generic_error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/assign_products"
        required: true
  "/api/v1/stores/{uuid}/products":
    parameters:
    - name: uuid
      in: path
      required: true
      schema:
        type: string
    get:
      summary: show products of store
      tags:
      - Stores
      description: See the products of a store
      operationId: showProductsOfStore
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/products"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/generic_error"
servers:
- url: http://localhost:3000
- url: https://pj-api-staging.onrender.com
